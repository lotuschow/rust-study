所有权（Ownership）：
独占性原则： Rust 的核心特性，一个值只能同时被一个变量所拥有。

移动语义： 当将一个值赋给另一个变量时，原变量将不再有效，值被移动到新变量。

复制语义： 对于实现了 Copy trait 的类型，赋值操作会创建值的副本而不是移动。

函数调用： 函数调用时，参数会移动或复制，取决于类型和是否实现了 Copy trait。

返回值： 函数返回值也会发生所有权转移，可以使用 return 关键字显式返回值。

不可变引用（Immutable References）：
共享性原则： 可以有多个不可变引用同时引用同一个值，但不能同时有一个可变引用。

避免数据竞争： 不可变引用不允许修改数据，因此避免了多线程并发修改的问题。

在同一作用域内： 不可变引用与可变引用不可以同时存在于同一个作用域。

可变引用（Mutable References）：
唯一性原则： 在特定作用域内，只能有一个可变引用来修改一个值。

避免数据竞争： 可变引用的唯一性保证了数据在修改时不会被其他线程访问。

不可变引用限制： 当有可变引用存在时，不可再有不可变引用。

结合使用：
借用规则： 在同一作用域内，可以有多个不可变引用，但是只能有一个可变引用。

可变引用的限制： 如果存在可变引用，就不能有不可变引用，以防止数据竞争。

解引用和借用： 可以通过解引用和重新借用来绕过借用规则的限制。

引用的生命周期： 引用必须满足生命周期规则，确保引用不会指向已释放的值。

