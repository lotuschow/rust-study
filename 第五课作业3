在 Substrate Node Template 的存证模块中添加新功能以转移存证，需要更新存证模块的 Rust 代码，并为存证添加一个新字段以存储接收账户地址。以下是如何实现这个功能的步骤：

在 Substrate Node Template 的 pallets 文件夹中找到 certification 子文件夹，并在其中创建一个名为 lib.rs 的文件。

更新 lib.rs 文件以包括转移存证的功能。下面是修改后的代码：
  // lib.rs

use frame_system::Module as System;
use frame_system::RawOrigin;
use frame_support::{decl_module, decl_storage, decl_event, ensure};
use sp_std::vec::Vec;

pub trait Trait: frame_system::Trait {}

decl_storage! {
    trait Store for Module<T: Trait> as CertificationModule {
        Certificates: map hasher(blake2_128_concat) Vec<u8> => (T::AccountId, T::AccountId);
    }
}

decl_event! {
    pub enum Event<T>
    where
        AccountId = <T as frame_system::Trait>::AccountId,
    {
        CertificateCreated(AccountId, Vec<u8>),
        CertificateRevoked(AccountId, Vec<u8>),
        CertificateTransferred(AccountId, Vec<u8>, AccountId),
    }
}

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        fn create_certificate(origin, certificate: Vec<u8>) {
            let sender = ensure_signed(origin)?;
            ensure!(!Certificates::<T>::contains_key(&certificate), "Certificate already exists");
            Certificates::<T>::insert(&certificate, (&sender, &sender));
            Self::deposit_event(RawEvent::CertificateCreated(sender.clone(), certificate.clone()));
        }

        fn revoke_certificate(origin, certificate: Vec<u8>) {
            let sender = ensure_signed(origin)?;
            ensure!(Certificates::<T>::contains_key(&certificate), "Certificate does not exist");
            let (owner, _) = Certificates::<T>::get(&certificate);
            ensure!(owner == sender, "You are not the owner of this certificate");
            Certificates::<T>::remove(&certificate);
            Self::deposit_event(RawEvent::CertificateRevoked(sender.clone(), certificate.clone()));
        }

        fn transfer_certificate(origin, certificate: Vec<u8>, new_owner: T::AccountId) {
            let sender = ensure_signed(origin)?;
            ensure!(Certificates::<T>::contains_key(&certificate), "Certificate does not exist");
            let (owner, _) = Certificates::<T>::get(&certificate);
            ensure!(owner == sender, "You are not the owner of this certificate");
            Certificates::<T>::mutate(&certificate, |(old_owner, _)| {
                *old_owner = new_owner.clone();
            });
            Self::deposit_event(RawEvent::CertificateTransferred(sender.clone(), certificate.clone(), new_owner));
        }
    }
}
在上述代码中，我们添加了一个名为 transfer_certificate 的新函数，用于转移存证。该函数接受三个参数：origin（交易发起者），certificate（存证哈希值），和 new_owner（存证的新拥有者）。我们确保只有当前存证的所有者才能调用此函数，并将存证的所有权从旧的拥有者转移到新的拥有者。

编译和运行 Substrate 节点，按照上述步骤中的示例代码来使用 Polkadot.js Apps 添加和转移存证。
这样，您就成功地为存证模块添加了转移存证的功能。当转移存证时，系统将记录相应的事件，包括存证哈希值、旧的拥有者和新的拥有者。
