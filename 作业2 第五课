首先，在 Substrate Node Template 的 pallets 文件夹中创建一个新的存证模块，例如 certification.

在存证模块文件夹中创建 lib.rs 文件，其中包含以下代码
// lib.rs

use frame_system::Module as System;
use frame_system::RawOrigin;
use frame_support::{decl_module, decl_storage, decl_event, ensure};
use sp_std::vec::Vec;

pub trait Trait: frame_system::Trait {}

decl_storage! {
    trait Store for Module<T: Trait> as CertificationModule {
        Certificates: map hasher(blake2_128_concat) Vec<u8> => Option<T::AccountId>;
    }
}

decl_event! {
    pub enum Event<T>
    where
        AccountId = <T as frame_system::Trait>::AccountId,
    {
        CertificateCreated(AccountId, Vec<u8>),
        CertificateRevoked(AccountId, Vec<u8>),
    }
}

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        fn create_certificate(origin, certificate: Vec<u8>) {
            let sender = ensure_signed(origin)?;
            ensure!(!Certificates::<T>::contains_key(&certificate), "Certificate already exists");
            Certificates::<T>::insert(&certificate, &sender);
            Self::deposit_event(RawEvent::CertificateCreated(sender, certificate));
        }

        fn revoke_certificate(origin, certificate: Vec<u8>) {
            let sender = ensure_signed(origin)?;
            ensure!(Certificates::<T>::contains_key(&certificate), "Certificate does not exist");
            let owner = Certificates::<T>::get(&certificate);
            ensure!(owner == sender, "You are not the owner of this certificate");
            Certificates::<T>::remove(&certificate);
            Self::deposit_event(RawEvent::CertificateRevoked(sender, certificate));
        }
    }
}
在 Substrate Node Template 的 runtime/src/lib.rs 文件中，将新创建的存证模块添加到 runtime 中：
// runtime/src/lib.rs

pub mod certification;


编译并运行 Substrate 节点：
cd substrate-node-template
./scripts/init.sh
./scripts/build.sh
./target/release/node-template --dev
使用 Polkadot.js Apps 或其他 Substrate 钱包连接到您的本地节点。


在 Polkadot.js Apps 中添加存证：

转到 Extrinsics 部分。
选择存证模块中的 "create_certificate" 函数。
填写存证的内容并提交交易。
撤销存证：

转到 Extrinsics 部分。
选择存证模块中的 "revoke_certificate" 函数。
填写要撤销的存证的内容并提交交易。
